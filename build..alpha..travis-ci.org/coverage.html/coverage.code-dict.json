{"/home/travis/build/npmtest/node-npmtest-nexpect/test.js":"/* istanbul instrument in package npmtest_nexpect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nexpect/lib.npmtest_nexpect.js":"/* istanbul instrument in package npmtest_nexpect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_nexpect = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_nexpect = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-nexpect/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-nexpect && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_nexpect */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_nexpect\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_nexpect.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_nexpect.rollup.js'] =\n            local.assetsDict['/assets.npmtest_nexpect.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_nexpect.__dirname + '/lib.npmtest_nexpect.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-nexpect/node_modules/nexpect/lib/nexpect.js":"/*\n * nexpect.js: Top-level include for the `nexpect` module.\n *\n * (C) 2011, Elijah Insua, Marak Squires, Charlie Robbins.\n *\n */\n\nvar spawn = require('child_process').spawn;\nvar util = require('util');\nvar AssertionError = require('assert').AssertionError;\n\nfunction chain (context) {\n  return {\n    expect: function (expectation) {\n      var _expect = function _expect (data) {\n        return testExpectation(data, expectation);\n      };\n\n      _expect.shift = true;\n      _expect.expectation = expectation;\n      _expect.description = '[expect] ' + expectation;\n      _expect.requiresInput = true;\n      context.queue.push(_expect);\n\n      return chain(context);\n    },\n    wait: function (expectation, callback) {\n      var _wait = function _wait (data) {\n        var val = testExpectation(data, expectation);\n        if (val === true && typeof callback === 'function') {\n          callback(data);\n        }\n        return val;\n      };\n\n      _wait.shift = false;\n      _wait.expectation = expectation;\n      _wait.description = '[wait] ' + expectation;\n      _wait.requiresInput = true;\n      context.queue.push(_wait);\n      return chain(context);\n    },\n    sendline: function (line) {\n      var _sendline = function _sendline () {\n        context.process.stdin.write(line + '\\n');\n\n        if (context.verbose) {\n          process.stdout.write(line + '\\n');\n        }\n      };\n\n      _sendline.shift = true;\n      _sendline.description = '[sendline] ' + line;\n      _sendline.requiresInput = false;\n      context.queue.push(_sendline);\n      return chain(context);\n    },\n    sendEof: function() {\n      var _sendEof = function _sendEof () {\n        context.process.stdin.destroy();\n      };\n      _sendEof.shift = true;\n      _sendEof.description = '[sendEof]';\n      _sendEof.requiresInput = false;\n      context.queue.push(_sendEof);\n      return chain(context);\n    },\n    run: function (callback) {\n      var errState = null,\n          responded = false,\n          stdout = [],\n          options;\n\n      //\n      // **onError**\n      //\n      // Helper function to respond to the callback with a\n      // specified error. Kills the child process if necessary.\n      //\n      function onError (err, kill) {\n        if (errState || responded) {\n          return;\n        }\n\n        errState = err;\n        responded = true;\n\n        if (kill) {\n          try { context.process.kill(); }\n          catch (ex) { }\n        }\n\n        callback(err);\n      }\n\n      //\n      // **validateFnType**\n      //\n      // Helper function to validate the `currentFn` in the\n      // `context.queue` for the target chain.\n      //\n      function validateFnType (currentFn) {\n        if (typeof currentFn !== 'function') {\n          //\n          // If the `currentFn` is not a function, short-circuit with an error.\n          //\n          onError(new Error('Cannot process non-function on nexpect stack.'), true);\n          return false;\n        }\n        else if (['_expect', '_sendline', '_wait', '_sendEof'].indexOf(currentFn.name) === -1) {\n          //\n          // If the `currentFn` is a function, but not those set by `.sendline()` or\n          // `.expect()` then short-circuit with an error.\n          //\n          onError(new Error('Unexpected context function name: ' + currentFn.name), true);\n          return false;\n        }\n\n        return true;\n      }\n\n      //\n      // **evalContext**\n      //\n      // Core evaluation logic that evaluates the next function in\n      // `context.queue` against the specified `data` where the last\n      // function run had `name`.\n      //\n      function evalContext (data, name) {\n        var currentFn = context.queue[0];\n\n        if (!currentFn || (name === '_expect' && currentFn.name === '_expect')) {\n          //\n          // If there is nothing left on the context or we are trying to\n          // evaluate two consecutive `_expect` functions, return.\n          //\n          return;\n        }\n\n        if (currentFn.shift) {\n          context.queue.shift();\n        }\n\n        if (!validateFnType(currentFn)) {\n          return;\n        }\n\n        if (currentFn.name === '_expect') {\n          //\n          // If this is an `_expect` function, then evaluate it and attempt\n          // to evaluate the next function (in case it is a `_sendline` function).\n          //\n          return currentFn(data) === true ?\n            evalContext(data, '_expect') :\n            onError(createExpectationError(currentFn.expectation, data), true);\n        }\n        else if (currentFn.name === '_wait') {\n          //\n          // If this is a `_wait` function, then evaluate it and if it returns true,\n          // then evaluate the function (in case it is a `_sendline` function).\n          //\n          if (currentFn(data) === true) {\n            context.queue.shift();\n            evalContext(data, '_expect');\n          }\n        }\n        else {\n          //\n          // If the `currentFn` is any other function then evaluate it\n          //\n          currentFn();\n\n          // Evaluate the next function if it does not need input\n          var nextFn = context.queue[0];\n          if (nextFn && !nextFn.requiresInput)\n            evalContext(data);\n        }\n      }\n\n      //\n      // **onLine**\n      //\n      // Preprocesses the `data` from `context.process` on the\n      // specified `context.stream` and then evaluates the processed lines:\n      //\n      // 1. Stripping ANSI colors (if necessary)\n      // 2. Removing case sensitivity (if necessary)\n      // 3. Splitting `data` into multiple lines.\n      //\n      function onLine (data) {\n        data = data.toString();\n\n        if (context.stripColors) {\n          data = data.replace(/\\u001b\\[\\d{0,2}m/g, '');\n        }\n\n        if (context.ignoreCase) {\n          data = data.toLowerCase();\n        }\n\n        var lines = data.split('\\n').filter(function (line) { return line.length > 0; });\n        stdout = stdout.concat(lines);\n\n        while (lines.length > 0) {\n          evalContext(lines.shift(), null);\n        }\n      }\n\n      //\n      // **flushQueue**\n      //\n      // Helper function which flushes any remaining functions from\n      // `context.queue` and responds to the `callback` accordingly.\n      //\n      function flushQueue () {\n        var remainingQueue = context.queue.slice(),\n            currentFn = context.queue.shift(),\n            lastLine = stdout[stdout.length - 1];\n\n        if (!lastLine) {\n          onError(createUnexpectedEndError(\n            'No data from child with non-empty queue.', remainingQueue));\n          return false;\n        }\n        else if (context.queue.length > 0) {\n          onError(createUnexpectedEndError(\n            'Non-empty queue on spawn exit.', remainingQueue));\n          return false;\n        }\n        else if (!validateFnType(currentFn)) {\n          // onError was called\n          return false;\n        }\n        else if (currentFn.name === '_sendline') {\n          onError(new Error('Cannot call sendline after the process has exited'));\n          return false;\n        }\n        else if (currentFn.name === '_wait' || currentFn.name === '_expect') {\n          if (currentFn(lastLine) !== true) {\n            onError(createExpectationError(currentFn.expectation, lastLine));\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      //\n      // **onData**\n      //\n      // Helper function for writing any data from a stream\n      // to `process.stdout`.\n      //\n      function onData (data) {\n        process.stdout.write(data);\n      }\n\n      options = {\n        cwd: context.cwd,\n        env: context.env\n      };\n\n      //\n      // Spawn the child process and begin processing the target\n      // stream for this chain.\n      //\n      context.process = spawn(context.command, context.params, options);\n\n      if (context.verbose) {\n        context.process.stdout.on('data', onData);\n        context.process.stderr.on('data', onData);\n      }\n\n      if (context.stream === 'all') {\n        context.process.stdout.on('data', onLine);\n        context.process.stderr.on('data', onLine);\n      } else {\n        context.process[context.stream].on('data', onLine);\n      }\n\n      context.process.on('error', onError);\n\n      //\n      // When the process exits, check the output `code` and `signal`,\n      // flush `context.queue` (if necessary) and respond to the callback\n      // appropriately.\n      //\n      context.process.on('close', function (code, signal) {\n        if (code === 127) {\n          // XXX(sam) Not how node works (anymore?), 127 is what /bin/sh returns,\n          // but it appears node does not, or not in all conditions, blithely\n          // return 127 to user, it emits an 'error' from the child_process.\n\n          //\n          // If the response code is `127` then `context.command` was not found.\n          //\n          return onError(new Error('Command not found: ' + context.command));\n        }\n        else if (context.queue.length && !flushQueue()) {\n          // if flushQueue returned false, onError was called\n          return;\n        }\n\n        callback(null, stdout, signal || code);\n      });\n\n      return context.process;\n    }\n  };\n}\n\nfunction testExpectation(data, expectation) {\n  if (util.isRegExp(expectation)) {\n    return expectation.test(data);\n  } else {\n    return data.indexOf(expectation) > -1;\n  }\n}\n\nfunction createUnexpectedEndError(message, remainingQueue) {\n  var desc = remainingQueue.map(function(it) { return it.description; });\n  var msg = message + '\\n' + desc.join('\\n');\n  return new AssertionError({\n    message: msg,\n    expected: [],\n    actual: desc\n  });\n}\n\nfunction createExpectationError(expected, actual) {\n  var expectation;\n  if (util.isRegExp(expected))\n    expectation = 'to match ' + expected;\n  else\n    expectation = 'to contain ' + JSON.stringify(expected);\n\n  var err = new AssertionError({\n    message: util.format('expected %j %s', actual, expectation),\n    actual: actual,\n    expected: expected\n  });\n  return err;\n}\n\nfunction nspawn (command, params, options) {\n  if (arguments.length === 2) {\n    if (Array.isArray(arguments[1])) {\n      options = {};\n    }\n    else {\n      options = arguments[1];\n      params = null;\n    }\n  }\n\n  if (Array.isArray(command)) {\n    params  = command;\n    command = params.shift();\n  }\n  else if (typeof command === 'string') {\n    command = command.split(' ');\n    params  = params || command.slice(1);\n    command = command[0];\n  }\n\n  options = options || {};\n  context = {\n    command: command,\n    cwd: options.cwd || undefined,\n    env: options.env || undefined,\n    ignoreCase: options.ignoreCase,\n    params: params,\n    queue: [],\n    stream: options.stream || 'stdout',\n    stripColors: options.stripColors,\n    verbose: options.verbose\n  };\n\n  return chain(context);\n}\n\n//\n// Export the core `nspawn` function as well as `nexpect.nspawn` for\n// backwards compatibility.\n//\nmodule.exports.spawn  = nspawn;\nmodule.exports.nspawn = {\n  spawn: nspawn\n};\n"}